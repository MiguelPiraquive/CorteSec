# Generated by Django 5.2 on 2025-08-22 01:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_email', models.EmailField(max_length=254, verbose_name='Email del usuario')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Dirección IP')),
                ('user_agent', models.TextField(verbose_name='User Agent')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Ubicación')),
                ('success', models.BooleanField(verbose_name='Exitoso')),
                ('reason', models.CharField(blank=True, max_length=200, verbose_name='Razón')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Fecha y hora')),
            ],
            options={
                'verbose_name': 'Intento de login',
                'verbose_name_plural': 'Intentos de login',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('full_name', models.CharField(blank=True, help_text='Nombre completo del usuario', max_length=150, verbose_name='Nombre completo')),
                ('email', models.EmailField(help_text='Email único del usuario (usado para login)', max_length=254, unique=True, verbose_name='Dirección de email')),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono de contacto', max_length=20, verbose_name='Teléfono')),
                ('birth_date', models.DateField(blank=True, help_text='Fecha de nacimiento del usuario', null=True, verbose_name='Fecha de nacimiento')),
                ('avatar', models.ImageField(blank=True, help_text='Imagen de perfil del usuario', null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, help_text='Descripción o biografía del usuario', verbose_name='Biografía')),
                ('address', models.CharField(blank=True, help_text='Dirección física del usuario', max_length=255, verbose_name='Dirección')),
                ('city', models.CharField(blank=True, help_text='Ciudad de residencia', max_length=100, verbose_name='Ciudad')),
                ('country', models.CharField(blank=True, help_text='País de residencia', max_length=100, verbose_name='País')),
                ('email_verified', models.BooleanField(default=False, help_text='Si el email del usuario ha sido verificado', verbose_name='Email verificado')),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Si la autenticación de dos factores está habilitada', verbose_name='2FA habilitado')),
                ('backup_codes', models.JSONField(blank=True, default=list, help_text='Códigos de respaldo para 2FA', verbose_name='Códigos de respaldo')),
                ('totp_secret', models.CharField(blank=True, help_text='Clave secreta para TOTP', max_length=32, verbose_name='Secreto TOTP')),
                ('last_ip', models.GenericIPAddressField(blank=True, help_text='Última dirección IP desde la que se conectó', null=True, verbose_name='Última IP')),
                ('last_user_agent', models.TextField(blank=True, help_text='Último navegador/dispositivo usado', verbose_name='Último User Agent')),
                ('last_location', models.CharField(blank=True, help_text='Última ubicación geográfica detectada', max_length=100, verbose_name='Última ubicación')),
                ('failed_login_attempts', models.IntegerField(default=0, help_text='Número de intentos de login fallidos consecutivos', verbose_name='Intentos fallidos')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Fecha y hora hasta cuando la cuenta está bloqueada', null=True, verbose_name='Cuenta bloqueada hasta')),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, help_text='Fecha del último cambio de contraseña', null=True, verbose_name='Contraseña cambiada en')),
                ('require_password_change', models.BooleanField(default=False, help_text='Si el usuario debe cambiar su contraseña en el próximo login', verbose_name='Requiere cambio de contraseña')),
                ('is_active', models.BooleanField(default=True, help_text='Designa si el usuario debe ser tratado como activo. Desmarcar en lugar de eliminar cuentas.', verbose_name='Activo')),
                ('is_staff', models.BooleanField(default=False, help_text='Designa si el usuario puede acceder al sitio de administración.', verbose_name='Es staff')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora cuando el usuario se registró', verbose_name='Fecha de registro')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última actualización del perfil', verbose_name='Última actualización')),
                ('organization_role', models.CharField(choices=[('OWNER', 'Propietario'), ('ADMIN', 'Administrador'), ('MANAGER', 'Gerente'), ('MEMBER', 'Miembro'), ('VIEWER', 'Visualizador')], default='MEMBER', help_text='Rol del usuario dentro de la organización', max_length=20, verbose_name='Rol en organizacion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('organization', models.ForeignKey(blank=True, help_text='Organización a la que pertenece este usuario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.organizacion', verbose_name='Organización')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Clave de sesión')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Dirección IP')),
                ('user_agent', models.TextField(verbose_name='User Agent')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Ubicación')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creado en')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Última actividad')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Sesión de usuario',
                'verbose_name_plural': 'Sesiones de usuario',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='login_custo_email_e95a75_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active'], name='login_custo_is_acti_6a4d43_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['date_joined'], name='login_custo_date_jo_1d5b86_idx'),
        ),
    ]
