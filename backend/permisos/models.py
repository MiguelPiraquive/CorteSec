"""
Sistema Integral de Gesti√≥n de Roles y Permisos Avanzado
========================================================

Arquitectura robusta, escalable y flexible para control de acceso granular
desarrollada espec√≠ficamente para CorteSec.

‚ú® Caracter√≠sticas principales:
- üèóÔ∏è Roles jer√°rquicos con herencia de permisos
- üîê Permisos granulares con condiciones din√°micas
- üìä Sistema de auditor√≠a completo y trazabilidad
- ‚ö° Cache inteligente para alto rendimiento
- üè¢ Soporte multi-tenant opcional
- üîÑ Evaluaci√≥n din√°mica de permisos en tiempo real
- üìã Plantillas de roles para asignaci√≥n masiva
- ‚è∞ Control temporal y vigencia de asignaciones
- üéØ Condiciones personalizables (Python, SQL, JSON, tiempo, ubicaci√≥n)
- üìà Estad√≠sticas y reportes avanzados

üîß Modelos incluidos:
- ModuloSistema: Gesti√≥n jer√°rquica de m√≥dulos
- TipoPermiso: Categorizaci√≥n de permisos
- CondicionPermiso: Evaluaci√≥n din√°mica
- Permiso: Permisos granulares
- PermisoDirecto: Permisos directos a usuarios
- AuditoriaPermisos: Trazabilidad completa

üöÄ Dise√±ado para ser comparable a:
- Keycloak, Django Guardian, Laravel Gate, Casbin
- Pero personalizado y maleable para las necesidades espec√≠ficas del proyecto

Autor: Sistema CorteSec
Versi√≥n: 2.0.0
Fecha: 2025-07-09
"""

from django.db import models
from django.contrib.auth import get_user_model
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ValidationError
from django.core.cache import cache
from django.utils import timezone
from django.db.models import Q, JSONField
import datetime
import uuid
import logging

from core.models import Organizacion
from core.mixins import TenantAwareModel

User = get_user_model()
logger = logging.getLogger('permissions')


class AuditMixin(TenantAwareModel):
    """Mixin para auditor√≠a y trazabilidad"""
    
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("Fecha de creaci√≥n")
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_("Fecha de modificaci√≥n")
    )
    
    created_by = models.ForeignKey(
        User,
        on_delete=models.PROTECT,
        related_name="%(class)s_created",
        null=True,
        blank=True,
        verbose_name=_("Creado por")
    )
    
    updated_by = models.ForeignKey(
        User,
        on_delete=models.PROTECT,
        related_name="%(class)s_updated",
        null=True,
        blank=True,
        verbose_name=_("Actualizado por")
    )
    
    metadata = JSONField(
        default=dict,
        blank=True,
        verbose_name=_("Metadatos"),
        help_text=_("Informaci√≥n adicional en formato JSON")
    )
    
    class Meta:
        abstract = True


class ModuloSistema(AuditMixin):
    """M√≥dulos del sistema con capacidades extendidas"""
    
    nombre = models.CharField(
        max_length=100,
        unique=True,
        verbose_name=_("Nombre del m√≥dulo")
    )
    
    codigo = models.CharField(
        max_length=50,
        unique=True,
        verbose_name=_("C√≥digo √∫nico"),
        help_text=_("C√≥digo √∫nico del m√≥dulo (snake_case)")
    )
    
    descripcion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("Descripci√≥n")
    )
    
    version = models.CharField(
        max_length=20,
        default="1.0.0",
        verbose_name=_("Versi√≥n")
    )
    
    # Configuraci√≥n visual
    icono = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name=_("Icono"),
        help_text=_("Clase CSS del icono")
    )
    
    color = models.CharField(
        max_length=7,
        default="#6366f1",
        verbose_name=_("Color"),
        help_text=_("Color hexadecimal")
    )
    
    orden = models.PositiveIntegerField(
        default=0,
        verbose_name=_("Orden de visualizaci√≥n")
    )
    
    # Configuraci√≥n de acceso
    url_base = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name=_("URL base")
    )
    
    # M√≥dulo padre para jerarqu√≠a
    padre = models.ForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='hijos',
        verbose_name=_("M√≥dulo padre")
    )
    
    nivel = models.PositiveIntegerField(
        default=0,
        verbose_name=_("Nivel en jerarqu√≠a")
    )
    
    # Estado y configuraci√≥n
    activo = models.BooleanField(
        default=True,
        verbose_name=_("M√≥dulo activo")
    )
    
    es_sistema = models.BooleanField(
        default=False,
        verbose_name=_("Es m√≥dulo del sistema")
    )
    
    requiere_licencia = models.BooleanField(
        default=False,
        verbose_name=_("Requiere licencia")
    )
    
    # Configuraci√≥n avanzada
    configuracion_avanzada = JSONField(
        default=dict,
        blank=True,
        verbose_name=_("Configuraci√≥n avanzada")
    )
    
    class Meta:
        verbose_name = _("M√≥dulo del Sistema")
        verbose_name_plural = _("M√≥dulos del Sistema")
        ordering = ['nivel', 'orden', 'nombre']
        indexes = [
            models.Index(fields=['activo', 'es_sistema']),
            models.Index(fields=['padre', 'activo']),
            models.Index(fields=['codigo']),
        ]

    def __str__(self):
        return f"{self.nombre} ({self.codigo})"
    
    def get_ruta_completa(self):
        """Obtiene la ruta completa del m√≥dulo en la jerarqu√≠a"""
        if self.padre:
            return f"{self.padre.get_ruta_completa()} > {self.nombre}"
        return self.nombre
    
    def get_hijos_activos(self):
        """Obtiene todos los m√≥dulos hijos activos"""
        return self.hijos.filter(activo=True)
    
    def clean(self):
        """Validaciones del modelo"""
        super().clean()
        
        # Evitar referencias circulares
        if self.padre_id == self.id:
            raise ValidationError(_("Un m√≥dulo no puede ser padre de s√≠ mismo"))
        
        # Validar jerarqu√≠a
        if self.padre and self.padre.nivel >= 3:
            raise ValidationError(_("No se permite m√°s de 3 niveles de jerarqu√≠a"))
    
    def save(self, *args, **kwargs):
        # Calcular nivel autom√°ticamente
        if self.padre:
            self.nivel = self.padre.nivel + 1
        else:
            self.nivel = 0
        
        super().save(*args, **kwargs)


class TipoPermiso(AuditMixin):
    """Tipos de permisos con capacidades extendidas"""
    
    CATEGORIA_CHOICES = [
        ('crud', _('CRUD (Crear, Leer, Actualizar, Eliminar)')),
        ('workflow', _('Flujo de trabajo (Aprobar, Rechazar, etc.)')),
        ('report', _('Reportes y An√°lisis')),
        ('admin', _('Administraci√≥n')),
        ('custom', _('Personalizado')),
    ]
    
    nombre = models.CharField(
        max_length=100,
        verbose_name=_("Nombre del tipo")
    )
    
    codigo = models.CharField(
        max_length=50,
        unique=True,
        verbose_name=_("C√≥digo √∫nico")
    )
    
    descripcion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("Descripci√≥n")
    )
    
    categoria = models.CharField(
        max_length=20,
        choices=CATEGORIA_CHOICES,
        default='crud',
        verbose_name=_("Categor√≠a")
    )
    
    # Configuraci√≥n visual
    icono = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name=_("Icono")
    )
    
    color = models.CharField(
        max_length=7,
        default="#6b7280",
        verbose_name=_("Color")
    )
    
    # Configuraci√≥n de comportamiento
    es_critico = models.BooleanField(
        default=False,
        verbose_name=_("Es cr√≠tico"),
        help_text=_("Los permisos cr√≠ticos requieren confirmaci√≥n adicional")
    )
    
    requiere_auditoria = models.BooleanField(
        default=False,
        verbose_name=_("Requiere auditor√≠a"),
        help_text=_("Se registra cada uso de este permiso")
    )
    
    activo = models.BooleanField(
        default=True,
        verbose_name=_("Activo")
    )
    
    class Meta:
        verbose_name = _("Tipo de Permiso")
        verbose_name_plural = _("Tipos de Permiso")
        ordering = ['categoria', 'nombre']
        indexes = [
            models.Index(fields=['activo', 'categoria']),
            models.Index(fields=['codigo']),
        ]

    def __str__(self):
        return f"{self.nombre} ({self.codigo})"


class CondicionPermiso(AuditMixin):
    """Condiciones din√°micas para evaluaci√≥n de permisos"""
    
    TIPO_CONDICION_CHOICES = [
        ('python', _('C√≥digo Python')),
        ('sql', _('Consulta SQL')),
        ('json', _('Configuraci√≥n JSON')),
        ('time', _('Restricci√≥n temporal')),
        ('location', _('Restricci√≥n por ubicaci√≥n')),
        ('custom', _('Personalizada')),
    ]
    
    nombre = models.CharField(
        max_length=100,
        verbose_name=_("Nombre de la condici√≥n")
    )
    
    codigo = models.CharField(
        max_length=50,
        unique=True,
        verbose_name=_("C√≥digo √∫nico")
    )
    
    tipo = models.CharField(
        max_length=20,
        choices=TIPO_CONDICION_CHOICES,
        verbose_name=_("Tipo de condici√≥n")
    )
    
    descripcion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("Descripci√≥n")
    )
    
    # Configuraci√≥n de la condici√≥n
    configuracion = JSONField(
        default=dict,
        blank=True,
        verbose_name=_("Configuraci√≥n"),
        help_text=_("Par√°metros espec√≠ficos de la condici√≥n")
    )
    
    codigo_evaluacion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("C√≥digo de evaluaci√≥n"),
        help_text=_("C√≥digo para evaluar la condici√≥n")
    )
    
    # Cache y rendimiento
    cacheable = models.BooleanField(
        default=True,
        verbose_name=_("Cacheable"),
        help_text=_("Si se puede cachear el resultado")
    )
    
    tiempo_cache = models.PositiveIntegerField(
        default=300,
        verbose_name=_("Tiempo de cache (segundos)")
    )
    
    activa = models.BooleanField(
        default=True,
        verbose_name=_("Condici√≥n activa")
    )
    
    class Meta:
        verbose_name = _("Condici√≥n de Permiso")
        verbose_name_plural = _("Condiciones de Permiso")
        ordering = ['tipo', 'nombre']
        indexes = [
            models.Index(fields=['activa', 'tipo']),
            models.Index(fields=['codigo']),
        ]

    def __str__(self):
        return f"{self.nombre} ({self.tipo})"
    
    def evaluar(self, usuario, contexto=None):
        """Eval√∫a la condici√≥n para un usuario y contexto dado"""
        if not self.activa:
            return False
        
        cache_key = f"condicion_{self.codigo}_{usuario.id}"
        if contexto:
            cache_key += f"_{hash(str(contexto))}"
        
        # Verificar cache
        if self.cacheable:
            resultado = cache.get(cache_key)
            if resultado is not None:
                return resultado
        
        # Evaluar condici√≥n
        resultado = self._evaluar_condicion(usuario, contexto)
        
        # Guardar en cache
        if self.cacheable:
            cache.set(cache_key, resultado, self.tiempo_cache)
        
        return resultado
    
    def _evaluar_condicion(self, usuario, contexto):
        """L√≥gica espec√≠fica de evaluaci√≥n seg√∫n el tipo"""
        if self.tipo == 'python':
            return self._evaluar_python(usuario, contexto)
        elif self.tipo == 'time':
            return self._evaluar_tiempo(usuario, contexto)
        elif self.tipo == 'json':
            return self._evaluar_json(usuario, contexto)
        else:
            return True
    
    def _evaluar_python(self, usuario, contexto):
        """Eval√∫a c√≥digo Python de forma segura"""
        try:
            # Crear un contexto seguro para la evaluaci√≥n
            safe_context = {
                'usuario': usuario,
                'contexto': contexto,
                'timezone': timezone,
                'datetime': datetime,
                'Q': Q,
            }
            
            # Ejecutar c√≥digo de forma segura
            return eval(self.codigo_evaluacion, {"__builtins__": {}}, safe_context)
        except Exception as e:
            logger.error(f"Error evaluando condici√≥n {self.codigo}: {e}")
            return False
    
    def _evaluar_tiempo(self, usuario, contexto):
        """Eval√∫a restricciones temporales"""
        config = self.configuracion
        now = timezone.now()
        
        # Verificar horario
        if 'hora_inicio' in config and 'hora_fin' in config:
            hora_actual = now.time()
            hora_inicio = datetime.time.fromisoformat(config['hora_inicio'])
            hora_fin = datetime.time.fromisoformat(config['hora_fin'])
            
            if not (hora_inicio <= hora_actual <= hora_fin):
                return False
        
        # Verificar d√≠as de la semana
        if 'dias_semana' in config:
            dia_actual = now.weekday()  # 0=Monday, 6=Sunday
            if dia_actual not in config['dias_semana']:
                return False
        
        return True
    
    def _evaluar_json(self, usuario, contexto):
        """Eval√∫a configuraci√≥n JSON"""
        # Implementar l√≥gica espec√≠fica seg√∫n configuraci√≥n
        return True


class Permiso(AuditMixin):
    """Permisos granulares con condiciones din√°micas"""
    
    AMBITO_CHOICES = [
        ('global', _('Global')),
        ('modulo', _('M√≥dulo espec√≠fico')),
        ('Organizacion', _('Organizaci√≥n')),
        ('recurso', _('Recurso espec√≠fico')),
        ('usuario', _('Usuario espec√≠fico')),
    ]
    
    nombre = models.CharField(
        max_length=200,
        verbose_name=_("Nombre del permiso")
    )
    
    codigo = models.CharField(
        max_length=100,
        unique=True,
        verbose_name=_("C√≥digo √∫nico"),
        help_text=_("Formato: modulo.tipo.recurso (ej: payroll.view.nomina)")
    )
    
    descripcion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("Descripci√≥n")
    )
    
    # Relaciones
    modulo = models.ForeignKey(
        ModuloSistema,
        on_delete=models.CASCADE,
        related_name='permisos',
        verbose_name=_("M√≥dulo")
    )
    
    tipo_permiso = models.ForeignKey(
        TipoPermiso,
        on_delete=models.CASCADE,
        related_name='permisos',
        verbose_name=_("Tipo de permiso")
    )
    
    Organizacion = models.ForeignKey(
        Organizacion,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='permisos',
        verbose_name=_("Organizaci√≥n")
    )
    
    # Configuraci√≥n del permiso
    ambito = models.CharField(
        max_length=20,
        choices=AMBITO_CHOICES,
        default='modulo',
        verbose_name=_("√Åmbito del permiso")
    )
    
    # Recurso espec√≠fico (para permisos granulares)
    content_type = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        verbose_name=_("Tipo de contenido")
    )
    
    object_id = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name=_("ID del objeto")
    )
    
    content_object = GenericForeignKey('content_type', 'object_id')
    
    # Condiciones de evaluaci√≥n
    condiciones = models.ManyToManyField(
        CondicionPermiso,
        blank=True,
        related_name='permisos',
        verbose_name=_("Condiciones")
    )
    
    # Configuraci√≥n avanzada
    es_heredable = models.BooleanField(
        default=True,
        verbose_name=_("Es heredable"),
        help_text=_("Se hereda a trav√©s de la jerarqu√≠a de roles")
    )
    
    es_revocable = models.BooleanField(
        default=True,
        verbose_name=_("Es revocable"),
        help_text=_("Se puede revocar temporalmente")
    )
    
    prioridad = models.PositiveIntegerField(
        default=0,
        verbose_name=_("Prioridad"),
        help_text=_("Mayor n√∫mero = mayor prioridad")
    )
    
    # Control temporal
    vigencia_inicio = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_("Inicio de vigencia")
    )
    
    vigencia_fin = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_("Fin de vigencia")
    )
    
    activo = models.BooleanField(
        default=True,
        verbose_name=_("Permiso activo")
    )
    
    es_sistema = models.BooleanField(
        default=False,
        verbose_name=_("Es del sistema")
    )
    
    class Meta:
        verbose_name = _("Permiso")
        verbose_name_plural = _("Permisos")
        ordering = ['modulo__orden', 'tipo_permiso__codigo', 'nombre']
        indexes = [
            models.Index(fields=['activo', 'es_sistema']),
            models.Index(fields=['codigo']),
            models.Index(fields=['modulo', 'activo']),
            models.Index(fields=['ambito', 'activo']),
        ]

    def __str__(self):
        return f"{self.modulo.nombre} - {self.nombre}"
    
    def clean(self):
        """Validaciones del modelo"""
        super().clean()
        
        # Validar vigencia
        if self.vigencia_inicio and self.vigencia_fin:
            if self.vigencia_inicio >= self.vigencia_fin:
                raise ValidationError(_("La fecha de inicio debe ser menor que la fecha de fin"))
    
    def esta_vigente(self):
        """Verifica si el permiso est√° vigente"""
        if not self.activo:
            return False
        
        now = timezone.now()
        
        if self.vigencia_inicio and now < self.vigencia_inicio:
            return False
        
        if self.vigencia_fin and now > self.vigencia_fin:
            return False
        
        return True
    
    def puede_usar(self, usuario, contexto=None):
        """Eval√∫a si un usuario puede usar este permiso"""
        if not self.esta_vigente():
            return False
        
        # Evaluar todas las condiciones
        for condicion in self.condiciones.filter(activa=True):
            if not condicion.evaluar(usuario, contexto):
                return False
        
        return True
    
    def can_access(self, usuario, accion, recurso=None):
        """Eval√∫a si un usuario puede realizar una acci√≥n en un recurso"""
        if not self.esta_vigente():
            return False

        # Evaluar condiciones
        for condicion in self.condiciones.filter(activa=True):
            if not condicion.evaluar(usuario, {'accion': accion, 'recurso': recurso}):
                return False

        return True


class PermisoDirecto(AuditMixin):
    """
    Modelo para permisos directos asignados a usuarios espec√≠ficos.
    Permite asignar permisos individuales sin necesidad de roles.
    """
    
    TIPO_CHOICES = [
        ('grant', _('Concedido')),
        ('deny', _('Denegado')),
        ('temporary', _('Temporal')),
    ]
    
    usuario = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='permisos_directos',
        verbose_name=_("Usuario")
    )
    
    permiso = models.ForeignKey(
        'Permiso',
        on_delete=models.CASCADE,
        related_name='asignaciones_directas',
        verbose_name=_("Permiso")
    )
    
    tipo = models.CharField(
        max_length=20,
        choices=TIPO_CHOICES,
        default='grant',
        verbose_name=_("Tipo de permiso")
    )
    
    fecha_inicio = models.DateTimeField(
        default=timezone.now,
        verbose_name=_("Fecha de inicio")
    )
    
    fecha_fin = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_("Fecha de fin")
    )
    
    asignado_por = models.ForeignKey(
        User,
        on_delete=models.PROTECT,
        related_name='permisos_directos_asignados',
        verbose_name=_("Asignado por")
    )
    
    motivo = models.TextField(
        blank=True,
        verbose_name=_("Motivo de la asignaci√≥n")
    )
    
    activo = models.BooleanField(
        default=True,
        verbose_name=_("Activo")
    )
    
    class Meta:
        verbose_name = _("Permiso Directo")
        verbose_name_plural = _("Permisos Directos")
        unique_together = [['usuario', 'permiso']]
        ordering = ['-fecha_inicio']
        indexes = [
            models.Index(fields=['usuario', 'activo']),
            models.Index(fields=['permiso', 'activo']),
            models.Index(fields=['fecha_inicio', 'fecha_fin']),
        ]
    
    def __str__(self):
        return f"{self.usuario.username} - {self.permiso.nombre}"
    
    def clean(self):
        """Validaciones del modelo"""
        super().clean()
        
        if self.fecha_fin and self.fecha_inicio and self.fecha_fin <= self.fecha_inicio:
            raise ValidationError(_("La fecha de fin debe ser posterior a la fecha de inicio"))
    
    def esta_vigente(self):
        """Verifica si el permiso directo est√° vigente"""
        if not self.activo:
            return False
        
        now = timezone.now()
        
        if now < self.fecha_inicio:
            return False
        
        if self.fecha_fin and now > self.fecha_fin:
            return False
        
        return True
    
    def es_efectivo(self):
        """Verifica si el permiso es efectivo (vigente y permiso activo)"""
        return self.esta_vigente() and self.permiso.esta_vigente()
    
    def revocar(self, motivo):
        """Revoca el permiso directo temporalmente"""
        self.activo = False
        self.motivo = motivo
        self.save()


class AuditoriaPermisos(TenantAwareModel):
    """Modelo para auditor√≠a de permisos"""
    accion = models.CharField(
        max_length=50,
        verbose_name=_("Acci√≥n realizada"),
        help_text=_("Ejemplo: Crear, Editar, Eliminar")
    )
    permiso = models.ForeignKey(
        Permiso,
        on_delete=models.CASCADE,
        related_name='auditorias',
        verbose_name=_("Permiso")
    )
    usuario = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name=_("Usuario")
    )
    fecha = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("Fecha de la acci√≥n")
    )
    detalles = JSONField(
        default=dict,
        blank=True,
        verbose_name=_("Detalles adicionales")
    )

    class Meta:
        verbose_name = _("Auditor√≠a de Permiso")
        verbose_name_plural = _("Auditor√≠as de Permisos")
        ordering = ['-fecha']

    def __str__(self):
        return f"{self.usuario.username} - {self.accion} - {self.permiso.nombre}"


class PermisoI18N(TenantAwareModel):
    """Modelo para soporte multiling√ºe en permisos"""
    permiso = models.ForeignKey(
        Permiso,
        on_delete=models.CASCADE,
        related_name='traducciones',
        verbose_name=_("Permiso")
    )
    idioma = models.CharField(
        max_length=10,
        verbose_name=_("Idioma"),
        help_text=_("Ejemplo: es, en, fr")
    )
    nombre = models.CharField(
        max_length=200,
        verbose_name=_("Nombre traducido")
    )
    descripcion = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("Descripci√≥n traducida")
    )

    class Meta:
        verbose_name = _("Permiso Internacionalizado")
        verbose_name_plural = _("Permisos Internacionalizados")
        unique_together = [['permiso', 'idioma']]

    def __str__(self):
        return f"{self.permiso.nombre} ({self.idioma})"


class ConfiguracionEntorno(TenantAwareModel):
    """Modelo para configuraciones por entorno"""
    entorno = models.CharField(
        max_length=50,
        verbose_name=_("Entorno"),
        help_text=_("Ejemplo: dev, staging, prod")
    )
    permiso = models.ForeignKey(
        Permiso,
        on_delete=models.CASCADE,
        related_name='configuraciones_entorno',
        verbose_name=_("Permiso")
    )
    configuracion = JSONField(
        default=dict,
        blank=True,
        verbose_name=_("Configuraci√≥n espec√≠fica")
    )

    class Meta:
        verbose_name = _("Configuraci√≥n por Entorno")
        verbose_name_plural = _("Configuraciones por Entorno")

    def __str__(self):
        return f"{self.permiso.nombre} ({self.entorno})"


# ==================== MANAGERS PERSONALIZADOS ====================

class PermisoManager(models.Manager):
    """Manager personalizado para Permiso"""
    
    def activos(self):
        """Obtiene solo los permisos activos"""
        return self.filter(activo=True)
    
    def por_modulo(self, modulo):
        """Obtiene permisos por m√≥dulo"""
        return self.filter(modulo=modulo)
    
    def por_tipo(self, tipo_permiso):
        """Obtiene permisos por tipo"""
        return self.filter(tipo_permiso=tipo_permiso)
    
    def criticos(self):
        """Obtiene permisos cr√≠ticos"""
        return self.filter(tipo_permiso__es_critico=True)
    
    def vigentes(self):
        """Obtiene permisos vigentes"""
        now = timezone.now()
        return self.filter(
            activo=True,
            vigencia_inicio__lte=now,
            vigencia_fin__gte=now
        )


# ==================== FUNCIONES DE UTILIDAD ====================

def obtener_permisos_directos_usuario(usuario):
    """
    Obtiene √∫nicamente los permisos directos de un usuario (sin roles).
    
    Args:
        usuario: Usuario del que obtener permisos
    
    Returns:
        QuerySet con permisos directos del usuario
    """
    return PermisoDirecto.objects.filter(
        usuario=usuario,
        activo=True
    ).select_related('permiso')


def verificar_permiso_directo_usuario(usuario, codigo_permiso, contexto=None):
    """
    Verifica si un usuario tiene un permiso directo espec√≠fico (sin roles).
    
    Args:
        usuario: Usuario a verificar
        codigo_permiso: C√≥digo del permiso (ej: 'payroll.view.nomina')
        contexto: Contexto adicional para evaluaci√≥n
    
    Returns:
        bool: True si tiene el permiso directo, False en caso contrario
    """
    try:
        permiso = Permiso.objects.get(codigo=codigo_permiso, activo=True)
        
        # Verificar si el permiso est√° vigente
        if not permiso.esta_vigente():
            return False
        
        # Verificar si el usuario puede usar el permiso
        if not permiso.puede_usar(usuario, contexto):
            return False
        
        # Verificar permisos directos √∫nicamente
        return PermisoDirecto.objects.filter(
            usuario=usuario,
            permiso=permiso,
            activo=True
        ).exists()
        
    except Permiso.DoesNotExist:
        return False


def limpiar_cache_permisos(usuario=None):
    """
    Limpia el cache de permisos.
    
    Args:
        usuario: Usuario espec√≠fico, o None para limpiar todo
    """
    if usuario:
        # Limpiar cache espec√≠fico del usuario
        cache_patterns = [
            f"permisos_usuario_{usuario.id}",
            f"roles_usuario_{usuario.id}",
        ]
        
        for pattern in cache_patterns:
            cache.delete(pattern)
    else:
        # Limpiar todo el cache relacionado con permisos
        cache.clear()


def estadisticas_permisos():
    """
    Obtiene estad√≠sticas del sistema de permisos (sin roles).
    
    Returns:
        dict: Diccionario con estad√≠sticas de permisos √∫nicamente
    """
    return {
        'total_usuarios': User.objects.count(),
        'total_permisos': Permiso.objects.count(),
        'permisos_activos': Permiso.objects.filter(activo=True).count(),
        'tipos_permiso': TipoPermiso.objects.count(),
        'Organizationes': Organizacion.objects.filter(activa=True).count(),
        'modulos': ModuloSistema.objects.filter(activo=True).count(),
        'condiciones': CondicionPermiso.objects.filter(activa=True).count(),
        'permisos_directos': PermisoDirecto.objects.filter(activo=True).count(),
    }


# ==================== SIGNALS ====================

from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver

@receiver(post_save, sender=PermisoDirecto)
def limpiar_cache_permiso_directo(sender, instance, **kwargs):
    """Limpia el cache cuando se crea/actualiza un permiso directo"""
    limpiar_cache_permisos(instance.usuario)

@receiver(post_delete, sender=PermisoDirecto)
def limpiar_cache_eliminacion_permiso_directo(sender, instance, **kwargs):
    """Limpia el cache cuando se elimina un permiso directo"""
    limpiar_cache_permisos(instance.usuario)


# ==================== REGISTRO EN ADMIN ====================

# Agregar managers personalizados a los modelos
Permiso.add_to_class('objects', PermisoManager())


# ==================== CONFIGURACI√ìN DE VERSIONES ====================

__version__ = '2.0.0'
__author__ = 'Sistema CorteSec'
__email__ = 'desarrollo@cortesec.com'
__status__ = 'Production'

# Configuraci√≥n de logging espec√≠fico para permisos
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
handler.setFormatter(formatter)
logger.addHandler(handler)

# Mensaje de inicio
logger.info(f"Sistema de Permisos Avanzado v{__version__} iniciado correctamente")


# ==================== EXPORTACIONES DEL M√ìDULO ====================

__all__ = [
    'AuditMixin',
    'ModuloSistema',
    'TipoPermiso',
    'CondicionPermiso',
    'Permiso',
    'PermisoDirecto',
    'AuditoriaPermisos',
    'PermisoI18N',
    'ConfiguracionEntorno'
]
