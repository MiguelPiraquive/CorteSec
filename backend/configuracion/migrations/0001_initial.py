# Generated by Django 5.2 on 2025-08-22 01:20

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConfiguracionEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servidor_smtp', models.CharField(help_text='Dirección del servidor SMTP', max_length=255, verbose_name='Servidor SMTP')),
                ('puerto_smtp', models.PositiveIntegerField(default=587, help_text='Puerto del servidor SMTP', verbose_name='Puerto SMTP')),
                ('usuario_smtp', models.CharField(help_text='Usuario para autenticación SMTP', max_length=255, verbose_name='Usuario SMTP')),
                ('password_smtp', models.CharField(help_text='Contraseña para autenticación SMTP', max_length=255, verbose_name='Contraseña SMTP')),
                ('usar_tls', models.BooleanField(default=True, help_text='Usar conexión segura TLS', verbose_name='Usar TLS')),
                ('usar_ssl', models.BooleanField(default=False, help_text='Usar conexión segura SSL', verbose_name='Usar SSL')),
                ('email_remitente', models.EmailField(help_text='Dirección de email que aparecerá como remitente', max_length=254, verbose_name='Email remitente')),
                ('nombre_remitente', models.CharField(help_text='Nombre que aparecerá como remitente', max_length=255, verbose_name='Nombre remitente')),
                ('email_respuesta', models.EmailField(blank=True, help_text='Email para respuestas (opcional)', max_length=254, null=True, verbose_name='Email de respuesta')),
                ('plantilla_header', models.TextField(blank=True, help_text='HTML que se incluirá en el header de todos los emails', null=True, verbose_name='Header de plantilla')),
                ('plantilla_footer', models.TextField(blank=True, help_text='HTML que se incluirá en el footer de todos los emails', null=True, verbose_name='Footer de plantilla')),
                ('limite_emails_hora', models.PositiveIntegerField(default=100, help_text='Número máximo de emails que se pueden enviar por hora', verbose_name='Límite de emails por hora')),
                ('limite_emails_dia', models.PositiveIntegerField(default=1000, help_text='Número máximo de emails que se pueden enviar por día', verbose_name='Límite de emails por día')),
                ('notificar_error_envio', models.BooleanField(default=True, help_text='Enviar notificación cuando falla el envío de un email', verbose_name='Notificar errores de envío')),
                ('email_administrador', models.EmailField(blank=True, help_text='Email del administrador para notificaciones', max_length=254, null=True, verbose_name='Email administrador')),
                ('servicio_activo', models.BooleanField(default=True, help_text='Si el servicio de email está activo', verbose_name='Servicio activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Configuración de Email',
                'verbose_name_plural': 'Configuración de Email',
            },
        ),
        migrations.CreateModel(
            name='ConfiguracionGeneral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_empresa', models.CharField(help_text='Nombre oficial de la empresa', max_length=200, verbose_name='Nombre de la empresa')),
                ('nit', models.CharField(help_text='Número de identificación tributaria', max_length=50, verbose_name='NIT')),
                ('direccion', models.TextField(help_text='Dirección principal de la empresa', verbose_name='Dirección')),
                ('telefono', models.CharField(max_length=50, verbose_name='Teléfono principal')),
                ('email', models.EmailField(help_text='Email principal de la empresa', max_length=254, verbose_name='Email principal')),
                ('sitio_web', models.URLField(blank=True, null=True, verbose_name='Sitio web')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='configuracion/logos/', verbose_name='Logo de la empresa')),
                ('moneda', models.CharField(default='COP', help_text='Código de moneda (ej: COP, USD)', max_length=10, verbose_name='Moneda')),
                ('simbolo_moneda', models.CharField(default='$', max_length=5, verbose_name='Símbolo de moneda')),
                ('zona_horaria', models.CharField(default='America/Bogota', help_text='Zona horaria de la empresa', max_length=50, verbose_name='Zona horaria')),
                ('formato_fecha', models.CharField(choices=[('%d/%m/%Y', 'DD/MM/YYYY'), ('%m/%d/%Y', 'MM/DD/YYYY'), ('%Y-%m-%d', 'YYYY-MM-DD')], default='%d/%m/%Y', max_length=20, verbose_name='Formato de fecha')),
                ('dia_pago_nomina', models.PositiveIntegerField(default=30, help_text='Día del mes para pago de nómina', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Día de pago de nómina')),
                ('periodo_nomina', models.CharField(choices=[('mensual', 'Mensual'), ('quincenal', 'Quincenal'), ('semanal', 'Semanal')], default='mensual', max_length=20, verbose_name='Período de nómina')),
                ('cuenta_efectivo_defecto', models.CharField(blank=True, help_text='Código de cuenta contable para efectivo', max_length=20, null=True, verbose_name='Cuenta de efectivo por defecto')),
                ('cuenta_nomina_defecto', models.CharField(blank=True, help_text='Código de cuenta contable para nómina', max_length=20, null=True, verbose_name='Cuenta de nómina por defecto')),
                ('sesion_timeout_minutos', models.PositiveIntegerField(default=30, help_text='Tiempo de inactividad antes de cerrar sesión', verbose_name='Timeout de sesión (minutos)')),
                ('max_intentos_login', models.PositiveIntegerField(default=3, help_text='Máximo intentos fallidos antes de bloquear cuenta', verbose_name='Máximo intentos de login')),
                ('requiere_cambio_password', models.BooleanField(default=True, help_text='Si los usuarios deben cambiar contraseña periódicamente', verbose_name='Requiere cambio de contraseña')),
                ('dias_cambio_password', models.PositiveIntegerField(default=90, help_text='Cada cuántos días se debe cambiar la contraseña', verbose_name='Días para cambio de contraseña')),
                ('servidor_email', models.CharField(blank=True, help_text='Servidor SMTP para envío de correos', max_length=100, null=True, verbose_name='Servidor de email')),
                ('puerto_email', models.PositiveIntegerField(default=587, verbose_name='Puerto de email')),
                ('email_usuario', models.CharField(blank=True, max_length=100, null=True, verbose_name='Usuario de email')),
                ('usar_tls', models.BooleanField(default=True, help_text='Usar conexión segura TLS para email', verbose_name='Usar TLS')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Última modificación')),
            ],
            options={
                'verbose_name': 'Configuración General',
                'verbose_name_plural': 'Configuración General',
            },
        ),
        migrations.CreateModel(
            name='ConfiguracionModulo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modulo', models.CharField(help_text='Nombre del módulo a configurar', max_length=100, verbose_name='Módulo')),
                ('activo', models.BooleanField(default=True, help_text='Si el módulo está activo y disponible', verbose_name='Módulo activo')),
                ('version', models.CharField(blank=True, help_text='Versión del módulo', max_length=20, null=True, verbose_name='Versión')),
                ('configuracion_json', models.JSONField(blank=True, default=dict, help_text='Configuración específica del módulo en formato JSON', verbose_name='Configuración JSON')),
                ('orden_menu', models.PositiveIntegerField(default=0, help_text='Orden de aparición en el menú principal', verbose_name='Orden en menú')),
                ('icono', models.CharField(blank=True, help_text='Clase CSS del icono del módulo', max_length=100, null=True, verbose_name='Icono')),
                ('color', models.CharField(blank=True, help_text='Color principal del módulo', max_length=20, null=True, verbose_name='Color')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Configuración de Módulo',
                'verbose_name_plural': 'Configuraciones de Módulo',
                'ordering': ['orden_menu', 'modulo'],
            },
        ),
        migrations.CreateModel(
            name='ConfiguracionSeguridad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiempo_sesion', models.PositiveIntegerField(default=30, help_text='Tiempo de inactividad antes de cerrar sesión automáticamente', verbose_name='Tiempo de sesión (minutos)')),
                ('max_intentos_login', models.PositiveIntegerField(default=3, help_text='Número máximo de intentos fallidos antes de bloquear la cuenta', verbose_name='Máximo intentos de login')),
                ('tiempo_bloqueo', models.PositiveIntegerField(default=15, help_text='Tiempo de bloqueo después de exceder los intentos de login', verbose_name='Tiempo de bloqueo (minutos)')),
                ('longitud_minima_password', models.PositiveIntegerField(default=8, help_text='Número mínimo de caracteres para las contraseñas', verbose_name='Longitud mínima de contraseña')),
                ('requiere_mayusculas', models.BooleanField(default=True, help_text='Las contraseñas deben contener al menos una letra mayúscula', verbose_name='Requiere mayúsculas')),
                ('requiere_minusculas', models.BooleanField(default=True, help_text='Las contraseñas deben contener al menos una letra minúscula', verbose_name='Requiere minúsculas')),
                ('requiere_numeros', models.BooleanField(default=True, help_text='Las contraseñas deben contener al menos un número', verbose_name='Requiere números')),
                ('requiere_simbolos', models.BooleanField(default=True, help_text='Las contraseñas deben contener al menos un símbolo especial', verbose_name='Requiere símbolos')),
                ('dias_expiracion_password', models.PositiveIntegerField(default=90, help_text='Número de días después de los cuales expira la contraseña', verbose_name='Días de expiración de contraseña')),
                ('historial_passwords', models.PositiveIntegerField(default=5, help_text='Número de contraseñas anteriores que no se pueden reutilizar', verbose_name='Historial de contraseñas')),
                ('habilitar_auditoria', models.BooleanField(default=True, help_text='Registrar todas las acciones de los usuarios', verbose_name='Habilitar auditoría')),
                ('dias_retencion_logs', models.PositiveIntegerField(default=365, help_text='Número de días para mantener los logs de auditoría', verbose_name='Días de retención de logs')),
                ('permitir_multiples_sesiones', models.BooleanField(default=False, help_text='Permitir que un usuario tenga múltiples sesiones activas', verbose_name='Permitir múltiples sesiones')),
                ('ips_permitidas', models.TextField(blank=True, help_text='Lista de IPs permitidas (separadas por comas). Vacío = todas permitidas', null=True, verbose_name='IPs permitidas')),
                ('notificar_login_fallido', models.BooleanField(default=True, help_text='Enviar notificación cuando hay intentos de login fallidos', verbose_name='Notificar login fallido')),
                ('notificar_cambio_password', models.BooleanField(default=True, help_text='Enviar notificación cuando se cambia la contraseña', verbose_name='Notificar cambio de contraseña')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Configuración de Seguridad',
                'verbose_name_plural': 'Configuración de Seguridad',
            },
        ),
        migrations.CreateModel(
            name='LogConfiguracion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_cambio', models.CharField(choices=[('general', 'Configuración General'), ('parametro', 'Parámetro'), ('modulo', 'Configuración Módulo'), ('sistema', 'Sistema')], max_length=20, verbose_name='Tipo de cambio')),
                ('nivel', models.CharField(choices=[('info', 'Información'), ('warning', 'Advertencia'), ('error', 'Error'), ('success', 'Éxito')], default='info', max_length=10, verbose_name='Nivel')),
                ('item_modificado', models.CharField(help_text='Nombre o código del item modificado', max_length=200, verbose_name='Item modificado')),
                ('valor_anterior', models.TextField(blank=True, null=True, verbose_name='Valor anterior')),
                ('valor_nuevo', models.TextField(blank=True, null=True, verbose_name='Valor nuevo')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción del cambio')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dirección IP')),
            ],
            options={
                'verbose_name': 'Log de Configuración',
                'verbose_name_plural': 'Logs de Configuración',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ParametroSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Código único del parámetro', max_length=100, unique=True, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre descriptivo del parámetro', max_length=200, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del parámetro', null=True, verbose_name='Descripción')),
                ('tipo_valor', models.CharField(choices=[('string', 'Texto'), ('integer', 'Número entero'), ('decimal', 'Número decimal'), ('boolean', 'Verdadero/Falso'), ('date', 'Fecha'), ('json', 'JSON')], max_length=20, verbose_name='Tipo de valor')),
                ('valor', models.TextField(help_text='Valor del parámetro', verbose_name='Valor')),
                ('valor_defecto', models.TextField(blank=True, help_text='Valor por defecto del parámetro', null=True, verbose_name='Valor por defecto')),
                ('es_sistema', models.BooleanField(default=False, help_text='Los parámetros del sistema no se pueden eliminar', verbose_name='Es del sistema')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Parámetro del Sistema',
                'verbose_name_plural': 'Parámetros del Sistema',
                'ordering': ['codigo'],
            },
        ),
    ]
